import cv2 # pip install opencv-python-headless pyttsx3 or/and opencv-python
import pyttsx3
import threading
import random
import queue
import tkinter as tk

# Initialize video paths
idle_video_path = "./momo-default-idle.mp4"
talk_video_path = "./momo-default-talk.mp4"

# Initialize text-to-speech engine
tts_engine = pyttsx3.init()

# Define the chatbot response generation function (same as before)
def generate_bot_response(user_input):
    user_input_lower = user_input.lower()

    if "hello" in user_input_lower:
        return "Hello there!"
    elif "how are you" in user_input_lower:
        return "I'm just a bot, but I'm functioning well. How can I assist you?"
    elif "bye" in user_input_lower:
        return "Goodbye! Feel free to come back anytime."
    else:
        return "I'm not sure how to respond to that."

# Play video loop function (with video switching)
def video_thread(intial_video_path, video_input_queue):
    video_path = intial_video_path
    while video_path is not None:
        cap = cv2.VideoCapture(video_path)
        while video_input_queue.empty():
            ret, frame = cap.read()
            if not ret:
                cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                continue

            # set the window for full screen
            cv2.namedWindow("Video", cv2.WND_PROP_FULLSCREEN)
            cv2.setWindowProperty("Video", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

            cv2.imshow("Video", frame)
            cv2.waitKey(30)
        cap.release()
        video_path = video_input_queue.get()

# A function to update the chat interface
def update_chat_interface():
    user_input = input_entry.get()
    if "goodbye" in user_input.lower():
        video_queue.put(None)
        root.destroy()
        return

    video_queue.put(talk_video_path)  # Switch to talk_video_path

    bot_response = generate_bot_response(user_input)
    chat_text.config(state=tk.NORMAL)
    chat_text.insert(tk.END, f"You: {user_input}\nBot: {bot_response}\n")
    chat_text.config(state=tk.DISABLED)
    tts_engine.say(bot_response)
    tts_engine.runAndWait()
    input_entry.delete(0, tk.END)

    video_queue.put(idle_video_path)  # Return to idle_video_path


# Main program
if __name__ == "__main__":
    root = tk.Tk()
    root.title("ChatBot")

    root.attributes('-alpha', 0.2)  # Adjust the alpha level as needed (0.0 - 1.0)

    chat_text = tk.Text(root, state=tk.DISABLED)
    chat_text.pack()

    input_entry = tk.Entry(root)
    input_entry.pack()

    send_button = tk.Button(root, text="Send", command=update_chat_interface)
    send_button.pack()

    video_queue = queue.Queue()
    video_thread = threading.Thread(target=video_thread, args=(idle_video_path, video_queue), daemon=True)
    video_thread.start()

    root.lift()

    root.mainloop()

    video_queue.put(None)
    video_thread.join()
    print("Chat ended.")
