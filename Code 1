import cv2 # pip install opencv-python-headless pyttsx3 or/and opencv-python
import pyttsx3
import threading
import random
import queue

# Initialize video paths
idle_video_path = "./momo-default-idle.mp4"
talk_video_path = "./momo-default-talk.mp4"

# Initialize text-to-speech engine
tts_engine = pyttsx3.init()

# Define the chatbot response generation function (same as before)
def generate_bot_response(user_input):
    user_input_lower = user_input.lower()

    if "hello" in user_input_lower:
        return "Hello there!"
    elif "how are you" in user_input_lower:
        return "I'm just a bot, but I'm functioning well. How can I assist you?"
    elif "bye" in user_input_lower:
        return "Goodbye! Feel free to come back anytime."
    else:
        return "I'm not sure how to respond to that."

# Play video loop function (with video switching)
def video_thread(intial_video_path, video_input_queue):
    video_path = intial_video_path
    while video_path is not None:
        cap = cv2.VideoCapture(video_path)
        while video_input_queue.empty():
            ret, frame = cap.read()
            if not ret:
                cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                continue

            # set the window for full screen
            cv2.namedWindow("Video", cv2.WND_PROP_FULLSCREEN)
            cv2.setWindowProperty("Video", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

            cv2.imshow("Video", frame)
            cv2.waitKey(30)
        cap.release()
        video_path = video_input_queue.get()

# Main program
if __name__ == "__main__":
    video_queue = queue.Queue()
    video_thread = threading.Thread(target=video_thread, args=(idle_video_path, video_queue), daemon=True)
    video_thread.start()
    while True:
        video_queue.put(idle_video_path)

        user_input = input("You: ")

        if "goodbye" in user_input.lower():
            break

        video_queue.put(talk_video_path)

        bot_response = generate_bot_response(user_input)
        print("Bot:", bot_response)
        tts_engine.say(bot_response)
        tts_engine.runAndWait()

    video_queue.put(None)
    video_thread.join()
    print("Chat ended.")
